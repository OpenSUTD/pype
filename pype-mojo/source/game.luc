// pype, (c) 2017

module game (
    input clk,
    
    // Selector direction inputs
    input left,
    input right,
    input up, 
    input down,
    
    // Tile rotation inputs
    input rotate_left,
    input rotate_right,
    
    // Output
    output vga_R,
    output vga_G,
    output vga_B,
    output vga_v_sync,
    output vga_v_hsync
  ) {

  .clk(clk) {
  
    
    // TODO: Instantiate an 8-bit ALU
        
    // 'screen' is the main state machine of the entire game.
    // it switches between the various screens in pype.
    fsm screen = {TITLE, LOAD_GAME, GAME_WAIT, GAME_CHECK_SOLUTION, WIN_LEVEL, WIN_GAME, GAME_OVER};
    
  }
  
  // Each of 25 tiles has 1 rotation coordinate, usable values from 0-5.
  sig rotation[25];
  
  sig selectedTile;
  
  sig numberOfWins;
  const MAX_WINS = 5;
    
  always {
  
    // set values of global variables
    selectedTile = 0;
    numberOfWins = 0;
    rotation = 0; // TODO: write randomizer to randomize rotations. For now, set all to 0 (northeast)
    
    // set boundaries for tile addressing.
    if (rotation[selectedTile] > 5) rotation[selectedTile] = 0;
    if (rotation[selectedTile] < 0) rotation[selectedTile] = 5;
    if (selectedTile > 24) selectedTile = 0;
    if (selectedTile < 0) selectedTile = 24;
    
    case(screen.q) {
    
      screen.TITLE:
        
        // render title screen here
        
        // if proceed, go to LOAD_GAME
        screen.d = screen.LOAD_GAME;
        
      screen.LOAD_GAME:
        
        // render game ui and puzzle here
        
        // check done, then go to GAME_WAIT
        screen.d = screen.GAME_WAIT;
        
      screen.GAME_WAIT:
        
        // listen for up, down, left and right
        // potential problems: both buttons pressed at same time?
        case (up || down || left || right) {  
        
          up:
            selectedTile = selectedTile - 5;
          
          down:
            selectedTile = selectedTile + 5;
            
          left:
            selectedTile = selectedTile - 1;
            
          right:
            selectedTile = selectedTile + 1;
            
          // TODO: render the box at the updated selectedTile location.
                     
        }
        
        case(rotate_left || rotate_right) {
        
          rotate_left:
            rotation[selectedTile] = rotation[selectedTile] - 1;
            
          rotate_right:
            rotation[selectedTile] = rotation[selectedTile] + 1;
            
          // render new tile image as a function of rotation[]
        }
        
        // listen for reset, goto TITLE
        if (reset) {
          screen.d = screen.TITLE;
        }
        
      screen.GAME_CHECK_SOLUTION:
      
        // check if current 2D array of solutions matches a solution
        if (match) {
          screen.d = screen.WIN_LEVEL;
        }
        
      screen.WIN_LEVEL:
        
        // check if wins = MAX_WINS, if true goto WIN_GAME
        if (numberOfWins == MAX_WINS) {
          screen.d = screen.WIN_GAME;
        }
        
      screen.WIN_GAME:
        
        // calc score
        // enter name if high score
        // execute teh bing dispenser
        
        // if reset, goto TITLE
        if (reset) {
          screen.d = screen.TITLE;
        }
  }
    
  }
}
